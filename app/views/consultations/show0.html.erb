<div class="container">
  <p id="notice"><%= notice %></p>
  <% event = @consultation.event %>

  <div class="row">
    <div class="col-sm-9">

      <div class="row">
        <div class="col-sm-9" id="video-container">
          <video id="their-video" autoplay></video><!-- 相手側の動画エリア -->
          <div class="report-text"><!-- 相談の情報 -->
            <p class="left"><strong>相談者：</strong><%= User.find(@consultation.client_id).name + 'さん' %></p>
            <p class="left"><strong>相談の件名：</strong><%= @consultation.event.title %></p>
            <p class="left"><strong>相談の内容：</strong><%= @consultation.memo %></p>
            <% if  @consultation.event.actual_start? && @consultation.event.actual_end? %>
              <p class="left"><strong>相談日時：</strong><%= @consultation.event.actual_start.strftime('%Y年%m月%d日 %H:%M')%>〜<%=@consultation.event.actual_end.strftime('%H:%M')%></p>
            <% end %>
          </div>

          <% if current_user.type == 'Consultant' %>
            <br>
            <p class="left"><strong>レポート</strong></p><!-- カウンセラー用のレポート記載欄 -->
            <%= render partial: 'reports/form', locals: { report: @report, consultation: @consultation } %>
            <div id="reports_area">
              <%= render partial: 'reports/index', locals: { reports: @reports, consultation: @consultation } %>
            </div>
          <% end %>
        </div>

        <div class="col-sm-3" id="video-container">
          <video id="my-video" muted="true" autoplay></video><!-- 自分側の動画エリア -->

          <p>Your id: <span id="my-id">...</span></p>
          <%= render partial: 'consultations/roomnumber_form', locals: { consultation: @consultation} %>
          <%= render partial: 'consultations/uploaddata_form', locals: { consultation: @consultation} %>
          <%= render partial: 'events/timestamp_form', locals: { event: event, consultation: @consultation} %>

          <form id="make-call">
            <!-- <input type="text" placeholder="Call user id..." id="callto-id" class="form-control"> -->
            <!-- <%= text_field_tag 'callto-id', params[:roomnumber], placeholder: "Call user id...", class: "form-control" %>-->
            <%= text_field_tag 'callto-id', @consultation.roomnumber, placeholder: "Call user id...", class: "form-control" %>
            <button href="#" class="btn btn-primary" type="submit">Call</button>
          </form>
          <form id="end-call"><!-- CSSでデフォルトでdisplay: noneとしている。相手と繋がったら（call.on('stream'...）showが実行される -->
            <!-- <p>Currently in call with <span id="their-id">...</span></p> -->
            <button href="#" class="btn btn-primary" type="submit">End Call</button>
          </form>

          <p><%= video_tag @consultation.data.url, :autoplay => true, :controls => true, class: "playback_video" %></p>

          <video id="playback_video" autoplay="1"></video>
          <button id="start_record_button" class="btn btn-primary">Start</button>
          <button id="stop_record_button" class="btn btn-primary">Stop</button>
          <button id="play_button" class="btn btn-primary">Play</button>
          <a href="#" id="downloadlink" class="download">Download</a>
        </div>
      </div>
    </div>

    <div class="col-sm-3 sidebar hidden-xs"><!-- 右側のコメントエリア-->
      <div class="sticky" style="border-bottom:1px solid #fff">
        <%= render partial: 'comments/form', locals: { comment: @comment, consultation: @consultation } %>
        <div class="row">
          <div class="col-sm-6 left">相談者</div>
          <div class="col-sm-6 right">カウンセラー</div>
        </div>
      </div>
      <div id="comments_area">
        <%= render partial: 'comments/index', locals: { comments: @comments, consultation: @consultation } %>
      </div>
      <!--<input type="button" onClick="vr_function();" value="音認開始">-->
    </div>
  </div>
</div>

<script>
/////////////////////////////動画//////////////////////////////

var roomNumber;//下方のpeer.on('open',でpeer.idをroomNumberに設定
var recordedData;

function roomnumber(){//DBのconsultation.roomnumberにroomNumberを書き込む
  document.getElementById('consultation_roomnumber').value = roomNumber;//_roomnumber_formのhidden_field:consultation_roomnumberにroomNumberをセット
  $("#set_roomnumber").submit();//_roomnumber_formのinputタグをsubmitする→enterroom_consultation_path(update)→consultation.roomnumberをDBにセット
}

function uploaddata(){//DBのconsultation.dataにrecordedDataを書き込む
  //recordedData(base64)はrecorder.ondataavailableで作成し、_uploaddata_formのhidden_field_tag :urlにセットする
  $("#set_uploaddata").submit();//_roomnumber_formのinputタグをsubmitする→enterroom_consultation_path(update)→consultation.roomnumberをDBにセット
}

$(window).on('turbolinks:load', function() {
  'use strict';

  let localStream = null;
  let theirStream = null;
  let peer = null;
  let existingCall = null;

  let localVideo =  document.getElementById('local_video');
  let playbackVideo =  document.getElementById('playback_video');
  let anchor = document.getElementById('downloadlink');
  let recorder =  null;
  let blobUrl = null;

  navigator.mediaDevices.getUserMedia({video: true, audio: true})
    .then(function (stream) {
        // Success
        $('#my-video').get(0).srcObject = stream;
        localStream = stream;
    }).catch(function (error) {
    // Error
    console.error('mediaDevice.getUserMedia() error:', error);
    return;
  });

  peer = new Peer({
    key: '439f50de-da89-4848-b13b-41ca198ba8d9',
    debug: 3
  });

  peer.on('open', function(){
      $('#my-id').text(peer.id);
      roomNumber = peer.id;
  });

  peer.on('error', function(err){
      alert(err.message);
  });

  peer.on('close', function(){
    //通話がcloseした時刻をConsultation(Event)の終了日時とし、events/timestamp_formのf.hidden_field :actual_endにセットする
    document.getElementById('event_actual_end').value = now;
    //events/timestamp_formをsubmitする
    $("#set_timestamp").submit();
  });

  peer.on('disconnected', function(){
  });

  $('#make-call').submit(function(e){
      e.preventDefault();
      const call = peer.call($('#callto-id').val(), localStream);
      setupCallEventHandlers(call);
  });

  $('#end-call').submit(function(){
    if (recorder) {
      recorder.stop();
      console.log("stop recording");
    }
    existingCall.close();
    $('#their-video').css('background-color','#eee');
    var now = new Date();
    document.getElementById('event_actual_end').value = now;
    $("#set_timestamp").submit();
  });

  peer.on('call', function(call){
    call.answer(localStream);
    setupCallEventHandlers(call);
  });

  function setupCallEventHandlers(call){
    if (existingCall) {
        existingCall.close();
    };

    existingCall = call;

    call.on('stream', function(stream){
      addVideo(call,stream);
      setupEndCallUI();
      theirStream = stream; //相手の動画
      //通話状態になった時刻をConsultation(Event)の開始日時とし、events/timestamp_formのf.hidden_field :actual_startにセットする
      var now = new Date();
      //events/timestamp_formをsubmitする
      document.getElementById('event_actual_start').value = now;
      //ここで録画を開始する
      startRecord();
    });

    call.on('close', function(){
      removeVideo(call.remoteId);
      setupMakeCallUI();
    });
  }

  function addVideo(call,stream){
    $('#their-video').get(0).srcObject = stream;
  }

  function removeVideo(peerId){
    $('#'+peerId).remove();
  }

  function setupMakeCallUI(){
    $('#make-call').show();
    $('#end-call').hide();
  }

  function setupEndCallUI() {
    $('#make-call').hide();
    $('#end-call').show();
  }

  $('#start_record_button').click(function(){
    if (! localStream) {
      console.warn("no stream");
      return;
    }
    if (recorder) {
      console.warn("recorder already exist");
      return;
    }

    recorder = new MediaRecorder(localStream);
    //console.log(localStream);
    recorder.ondataavailable = function(evt) {
      console.log("data available, start playback");
      var videoBlob = new Blob([evt.data], { type: evt.data.type });
      blobUrl = window.URL.createObjectURL(videoBlob);
      playbackVideo.src = blobUrl;
      playbackVideo.onended = function() {
        playbackVideo.pause();
        playbackVideo.src = "";
      };

      anchor.download = 'recorded.webm';//ファイル名
      anchor.href = blobUrl;
      playbackVideo.play();

      //blobをbase64にしてから_uploaddata_formの#urlに渡す
      var reader = new window.FileReader();
      reader.readAsDataURL(videoBlob);
      reader.onloadend = function() {
        var base64data = reader.result;
        base64data = base64data.split(',')[1];//これをしないと駄目
        document.getElementById('url').value = base64data;//_uploaddata_formの#urlにデータをセット
      }
      //console.log(base64data)
      //////////////////////////////////////////////
    }

    recorder.start();
    console.log("start recording");
  });

  function startRecord(){
    if (! localStream) {
      console.warn("no stream");
      return;
    }
    if (recorder) {
      console.warn("recorder already exist");
      return;
    }

    recorder = new MediaRecorder(localStream);
    console.log("OK start recording");
    //console.log(localStream);
    recorder.ondataavailable = function(evt) {
      console.log("data available, start playback");
      var videoBlob = new Blob([evt.data], { type: evt.data.type });
      blobUrl = window.URL.createObjectURL(videoBlob);
      playbackVideo.src = blobUrl;
      playbackVideo.onended = function() {
        playbackVideo.pause();
        playbackVideo.src = "";
      };

      anchor.download = 'recorded.webm';//ファイル名
      anchor.href = blobUrl;
      playbackVideo.play();

      //blobをbase64にしてから_uploaddata_formの#urlに渡す
      var reader = new window.FileReader();
      reader.readAsDataURL(videoBlob);
      reader.onloadend = function() {
        var base64data = reader.result;
        base64data = base64data.split(',')[1];//これをしないと駄目
        document.getElementById('url').value = base64data;//_uploaddata_formの#urlにデータをセット
      }
      console.log("OK recorded");
      //////////////////////////////////////////////
    }

    recorder.start();
    console.log("start recording");
  }
  function stopRecord(){
    if (recorder) {
      recorder.stop();
      console.log("stop recording 2");
    }
  }

  $('#stop_record_button').click(function(){
    if (recorder) {
      recorder.stop();
      console.log("stop recording");
    }
  });


  $('#play_button').click(function(){
    if (blobUrl) {
    playbackVideo.src = blobUrl;
    playbackVideo.onended = function() {
      playbackVideo.pause();
      playbackVideo.src = "";
    };

    playbackVideo.play();
    }
  });

  ////////////////////音声認識////////////////////
  var flag_speech = 0;

  function vr_function() {
    window.SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition;
    var recognition = new webkitSpeechRecognition();
    recognition.lang = 'ja';
    recognition.interimResults = true;
    recognition.continuous = true;

    recognition.onsoundstart = function() {
        document.getElementById('status').innerHTML = "認識中";
    };
    recognition.onnomatch = function() {
        document.getElementById('status').innerHTML = "もう一度試してください";
    };
    recognition.onerror = function() {
        document.getElementById('status').innerHTML = "エラー";
        if(flag_speech == 0)
          vr_function();
    };
    recognition.onsoundend = function() {
        document.getElementById('status').innerHTML = "停止中";
          vr_function();
    };

    recognition.onresult = function(event) {
        var results = event.results;
        for (var i = event.resultIndex; i < results.length; i++) {
            if (results[i].isFinal)
            {
                document.getElementById('result_text').innerHTML = results[i][0].transcript;
                vr_function();
            }
            else
            {
                document.getElementById('result_text').innerHTML = "[途中経過] " + results[i][0].transcript;
                flag_speech = 1;
            }
        }
    }
    flag_speech = 0;
    document.getElementById('status').innerHTML = "start";
    recognition.start();
  }
  ////////////////////音声認識////////////////////
});
</script>

<div class="container">
  <p id="notice"><%= notice %></p>

  <% event = @consultation.event %>
  <%= hidden_field_tag :usertype, current_user.type %>
  <%= hidden_field_tag :actual_start, event.actual_start %>

  <div class="row">
    <div class="col-sm-9"><!--左側-->

      <div class="row">
        <div class="col-sm-9 videowrapper" id="their-videocontainer"><!-- 相手側の動画もしくは録画動画のエリア -->
          <div class="videoinfo left" style="margin:0px"><!-- 相談の情報 -->
            相談者：<%= User.find(@consultation.client_id).name + 'さん' %><br>
            相談の件名：<%= @consultation.event.title %><br>
            <% if  @consultation.event.actual_start? && @consultation.event.actual_end? %>
            相談日時：<%= @consultation.event.actual_start.strftime('%Y年%m月%d日 %H:%M')%>〜<%=@consultation.event.actual_end.strftime('%H:%M')%>
            <% end %>
          </div>
          <div><%= video_tag @consultation.data.url, id: "videodata", type: "video/webm", autoplay: false, controls: true, class: "their-video"%></div><!--consultation.dataの動画エリア、通話時はこちらがhidden -->
          <div><%= video_tag id: "their-video", autoplay: true, controls: false, style: "display:none", class: "their-video"%></div><!--相手側の動画エリア、通話時はこちらがshown -->
        </div>

        <div class="col-sm-3" id="my-videocontainer"><!-- 自分側の動画のエリア -->
          <video id="my-video" muted="true" autoplay class="my-video"></video>
          <p>
            <%= render partial: 'consultations/uploaddata_form', locals: { consultation: @consultation} %><!--データ登録ボタン,非表示にしている-->
            <%= render partial: 'events/timestamp_form', locals: { event: event, consultation: @consultation} %><!--開始・終了日時記録ぼたん,非表示にしている-->
          </p>

          <% if current_user.type == 'Consultant' %><!--入室ボタン-->
            <%= render partial: 'consultations/roomnumber_form', locals: { consultation: @consultation} %>
          <% elsif current_user.type == 'Client' %>
            <form id="make-call">
              <p><button href="#" class="btn btn-primary btn-block" type="submit">入室（相談者）</button></p>
              <p><%= text_field_tag 'callto-id', @consultation.roomnumber, placeholder: "Call user id...", class: "form-control invisible" %></p>
            </form>
          <% end %>

          <!-- CSSでデフォルトでdisplay: noneとしている。相手と繋がったら（call.on('stream'...）showが実行される -->
          <p><button id="end-call" class="btn btn-primary btn-block">退室</button></p>
          <!-- SkyWayの確認用、非表示 -->
          <p><span id="my-id" class="invisible">...</span></p>

        </div>
      </div>
      <div class "row">
        <div class="report"><!-- 相談の情報 -->
          <p class="left"><strong>相談の内容：</strong><%= @consultation.memo %></p>
        </div>
      </div>
      <div class "row">
        <% if current_user.type == 'Consultant' %>
          <!-- カウンセラーのレポート欄 -->
          <%= render partial: 'reports/form', locals: { report: @report, consultation: @consultation } %>
          <div id="reports_area">
            <%= render partial: 'reports/index', locals: { reports: @reports, consultation: @consultation } %>
          </div>
        <% elsif current_user.type == 'Client' %>
          <!-- 相談者に開示されたレポート欄 -->
          <div id="reports_area">
            <%= render partial: 'reports/index', locals: { reports: @reports, consultation: @consultation } %>
          </div>
        <% end %>
      </div>
    </div>

    <div class="col-sm-3 sidebar hidden-xs"><!-- 右側の会話データエリア-->
      <div class="sticky" style="border-bottom:1px solid #fff">
        <%= render partial: 'comments/form', locals: { comment: @comment, consultation: @consultation } %>
        <div class="row">
          <div class="col-sm-6 left">相談者</div>
          <div class="col-sm-6 right">カウンセラー</div>
        </div>
      </div>
      <div id="comments_area">
        <%= render partial: 'comments/index', locals: { comments: @comments, consultation: @consultation, event: event } %>
      </div>
      <!--<input type="button" onClick="vr_function();" value="音認開始">-->
    </div>
  </div>
</div>


<script>
/////WebRTC関連/////
var roomNumber;//下方のpeer.on('open',...でpeer.idをroomNumberに設定
var recordedData;

function roomnumber(){//DBのconsultation.roomnumberにroomNumberを書き込む。_roomnumber_formのinputタグのonclickで実行される。
  document.getElementById('consultation_roomnumber').value = roomNumber;//_roomnumber_formのhidden_field:consultation_roomnumberにroomNumberをセット
  $("#set_roomnumber").submit();//_roomnumber_formのinputタグをsubmitする→enterroom_consultation_path(update)→consultation.roomnumberをDBにセット
}

function uploaddata(){//DBのconsultation.dataにrecordedDataを書き込む。_uploaddata_formのinputタグのonclickで実行される。
  //recordedData(base64)を以下のrecorder.ondataavailableで作成し、_uploaddata_formのhidden_field_tag :urlにセットしている。
  $("#set_uploaddata").submit();//_uploaddata_formのinputタグをsubmitする→enterroom_consultation_path(update)→consultation.roomnumberをDBにセット
}

function videoseek(){//コメントの発話時点から録画データを再生する
  if($("#videodata").css('display') == 'inline-block'){//録画データが表示中ならば
    var sec = parseInt(event.target.innerHTML);//comments/_index.htmlの各コメント内の再生マークに続く発話時点（秒）を取ってくる
    console.log(event.target.innerHTML);
    if(sec > 0){
      $("#videodata").get(0).currentTime = sec;//録画データの再生位置を設定
      $("#videodata").get(0).play();//再生
    }
  }
}

$(window).on('turbolinks:load', function() {
  'use strict';

  Turbolinks.clearCache();//意味ない？

  let localStream = null;//自分側の動画
  let theirStream = null;//相手側の動画
  let peer = null;//WebRTC
  let existingCall = null;
  let recorder =  null;
  let blobUrl = null;

  let isConsultant = false;//このページを開いているユーザがConsultantか？
  if($('#usertype').val() == 'Consultant'){
    isConsultant = true;
  }

  navigator.mediaDevices.getUserMedia({video: true, audio: true})
    .then(function (stream) {
        // Success
        $('#my-video').get(0).srcObject = stream;//自分側の動画
        localStream = stream;
    }).catch(function (error) {
    // Error
    console.error('mediaDevice.getUserMedia() error:', error);
    return;
  });

  peer = new Peer({
    key: '439f50de-da89-4848-b13b-41ca198ba8d9',
    debug: 3
  });

  peer.on('open', function(){
      $('#my-id').text(peer.id);//単に表示しているだけ
      roomNumber = peer.id;
  });

  peer.on('error', function(err){
      //alert(err.message);
      alert('カウンセラーが未入室です。カウンセラーの入室を待ってください。');
  });

  peer.on('close', function(){
  });

  peer.on('disconnected', function(){
  });

  $('#make-call').submit(function(e){//相手側をコールする（ここでは相談者からカウンセラーへのコールのみ）
      e.preventDefault();
      const call = peer.call($('#callto-id').val(), localStream);
      setupCallEventHandlers(call);
  });

  $('#end-call').click(function(){//通話を終了する
    existingCall.close();//通話切断
    document.getElementById('their-video').style.backgroundColor = '#eee';
    if(isConsultant){//Consultant側のクライアントでのみ実行
      stopRecord();//録画終了
      //通話を切断した時刻をConsultation(Event)の終了日時とし、events/timestamp_formのf.hidden_field :actual_endにセットする
      var now = new Date();
      document.getElementById('event_actual_end').value = now;
      $("#set_timestamp").submit();//events/timestamp_formをsubmitし終了日時をDBに登録する
    }
  });

  peer.on('call', function(call){
    call.answer(localStream);
    setupCallEventHandlers(call);
  });

  function setupCallEventHandlers(call){
    if (existingCall) {
        existingCall.close();
    };

    existingCall = call;

    call.on('stream', function(stream){
      addVideo(call,stream);
      setupEndCallUI();
      theirStream = stream; //相手の動画

      //通話状態になった時刻をConsultation(Event)の開始日時とし、events/timestamp_formのf.hidden_field :actual_startにセットする
      //コメントの発話時点（speechstartat）をConsultant、Clientの双方の時刻からの経過時間として計算するため、双方でFormに書いておく
      //ただしsubmitは、actual_endと併せ、Consultantのみで行う
      var now = new Date();
      document.getElementById('event_actual_start').value = now;//events/timestamp_formをsubmitし開始日時をDBに登録する

      if(isConsultant){//Consultant側のクライアントでのみ実行
      //$("#set_timestamp").submit();
        startRecord();//録画を開始する
      }
      vr_function();//Consultant、Client共に音声認識を開始する（vr_functionはcomments/_form.htmlで定義）
    });

    call.on('close', function(){
      removeVideo(call.remoteId);
      setupMakeCallUI();
    });
  }

  function addVideo(call,stream){
    $('#videodata').hide();//consultation.data欄を非表示にして
    $('#their-video').show();//通話中の相手動画欄を表示する
    $('#their-video').get(0).srcObject = stream; //相手の動画
  }

  function removeVideo(peerId){
    $('#'+peerId).remove();
  }

  function setupMakeCallUI(){
    $('#end-call').hide();
    if(isConsultant){
      $('#set_roomnumber').show();//カウンセラー向けの入室ボタン
    }
    else {
      $('#make-call').show();//相談者向けの入室ボタン
    }
  }

  function setupEndCallUI() {
    $('#end-call').show();
    if(isConsultant){
      $('#set_roomnumber').hide();//カウンセラー向けの入室ボタン
    }
    else {
      $('#make-call').hide();//相談者向けの入室ボタン
    }
  }

  function startRecord(){
    if (! theirStream) {
      console.warn("no stream");
      return;
    }
    /*if (recorder) {
      console.warn("recorder already exist");
      return;
    }*/

    //自分側の音声を、相手側音声に合成して記録する（→うまく行かない）
    //theirStream.addTrack(localStream.getAudioTracks()[0]);

    //自分側の音声を、相手側音声に合成して記録する（→これもうまく行かない）
    ///////////////////////////////////////////
    /*var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext = new AudioContext();
    var gain_node = audioContext.createGain();
    gain_node.gain.value = 1;
    var source = audioContext.createMediaStreamSource(localStream);
    source.connect(gain_node);
    var output = audioContext.createMediaStreamDestination();
    gain_node.connect(output);
    console.log("#############BEFORE###########"+theirStream.getAudioTracks());
    theirStream.addTrack(output.stream.getAudioTracks()[0]);
    console.log("#############AFTER###########"+theirStream.getAudioTracks());*/

    //自分側と相手側の音声を合成して、相手側動画の音声として記録する
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext = new AudioContext();
    var source1 = audioContext.createMediaStreamSource(localStream);
    var source2 = audioContext.createMediaStreamSource(theirStream);
    var gain_node1 = audioContext.createGain();
    var gain_node2 = audioContext.createGain();
    var biqd_filter1 = audioContext.createBiquadFilter();
    var biqd_filter2 = audioContext.createBiquadFilter();
    var merger = audioContext.createChannelMerger();
    var output = audioContext.createMediaStreamDestination();

    gain_node1.gain.value = 1;
    gain_node2.gain.value = 1;
    biqd_filter1.type = 'lowpass';
    biqd_filter1.frequency.value = 1600;
    biqd_filter2.type = 'lowpass';
    biqd_filter2.frequency.value = 1600;

    source1.connect(gain_node1);
    source2.connect(gain_node2);
    //gain_node1.connect(output);
    //gain_node2.connect(output);
    gain_node1.connect(biqd_filter1);
    gain_node2.connect(biqd_filter2);
    biqd_filter1.connect(merger,0);
    biqd_filter2.connect(merger,0);
    merger.connect(output);

    console.log("#############BEFORE###########"+theirStream.getAudioTracks());
    theirStream.removeTrack(theirStream.getAudioTracks()[0]);
    theirStream.addTrack(output.stream.getAudioTracks()[0]);
    console.log("#############AFTER###########"+theirStream.getAudioTracks());

    recorder = new MediaRecorder(theirStream);
    console.log("OK start recording");
    //console.log(localStream);
    recorder.ondataavailable = function(evt) {
      console.log("data available, start playback");
      var videoBlob = new Blob([evt.data], { type: evt.data.type });//録画データ
      blobUrl = window.URL.createObjectURL(videoBlob);//録画データのblobUrl

      //録画直後のデータをvideodata欄に表示する
      $('#their-video').hide();//相手側動画欄を非表示にして
      $('#videodata').show();//consultation.data欄を再表示
      //$('#videodata').src = blobUrl;
      document.getElementById('videodata').src = blobUrl;//メモリ上の録画データをvideodata領域にセット（上のjqueryだとうまく動かない）

      //DBへの保存用に、録画データをbase64にしてから_uploaddata_formの#urlに渡す
      var reader = new window.FileReader();
      reader.readAsDataURL(videoBlob);
      reader.onloadend = function() {
        var base64data = reader.result;
        base64data = base64data.split(',')[1];//これをしないと駄目
        document.getElementById('url').value = base64data;//_uploaddata_formの#urlにデータをセット
        $("#set_uploaddata").submit();//_uploaddata_formのinputタグをsubmitする→enterroom_consultation_path(update)→consultation.roomnumberをDBにセット

      }
    }
    recorder.start();
    console.log("start recording");
  }

  function stopRecord(){
    if (recorder) {
      recorder.stop();
    }
  }

  $(window).on('turbolinks:before-visit', function(event) {
  	if(isConsultant && location.pathname.indexOf("/consultations/")==0){//consultations/showをConsultantが開いている場合
      document.getElementById('consultation_roomnumber').value = null;//このページからConsultantが離れる場合はroomnumberをnilにする
      $("#set_roomnumber").submit();//_roomnumber_formのinputタグをsubmitする→enterroom_consultation_path(update)→consultation.roomnumberをDBにセット
    }
    return;
  })

});
</script>
